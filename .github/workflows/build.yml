name: build

on:
  push:
    branches: [master]
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [12.x]
    env:
      solutionname: HelloPCF
      msbuildtarget: Solution/HelloPCF
      solutionpath: Solution/HelloPCF/bin/Debug/
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Install dependencies
        run: npm ci

      - run: npm run build --if-present
      - run: npm test

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1

      - name: MSBuild
        working-directory: ${{ env.msbuildtarget }}
        run: msbuild /restore /t:rebuild

      - name: Read package.json
        uses: tyankatsu0105/read-package-version-actions@v1
        id: package-version

      - name: Solution File Names with version
        run: echo "Set additional env variables"
        env:
          managedsolutionname: ${{ env.solutionname }}_${{ steps.package-version.outputs.version }}_managed.zip
          unmanagedsolutionname: ${{ env.solutionname }}_${{ steps.package-version.outputs.version }}_unmanaged.zip
          unmanagedsolutionfullpath: ${{ env.solutionpath }}${{ env.solutionname }}.zip
          managedsolutionfullpath: ${{ env.solutionpath }}${{ env.solutionname }}_managed.zip

      - name: Managed Solution Artifact ${{ env.managedsolutionname }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.managedsolutionname }}
          path: ${{ env.managedsolutionfullpath }}

      - name: Unmanaged Solution Artifact ${{ env.unmanagedsolutionname }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.unmanagedsolutionname }}
          path: ${{ env.unmanagedsolutionfullpath }}

      - name: Create Release ${{ env.solutionname }}_v${{ steps.package-version.outputs.version }}
        id: create_release
        uses: actions/create-release@v1
        if: contains(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.solutionname }}_v${{ steps.package-version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset ${{ env.managedsolutionname }} (Managed)
        id: release-managed-solution
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.managedsolutionfullpath }}
          asset_name: ${{ env.managedsolutionname }}
          asset_content_type: application/zip

      - name: Upload Release Asset ${{ env.unmanagedsolutionname }} (Unmanaged)
        id: release-unmanaged-solution
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.unmanagedsolutionfullpath }}
          asset_name: ${{ env.unmanagedsolutionname }}
          asset_content_type: application/zip
